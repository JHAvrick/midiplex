import { expect, test } from '@jest/globals';
import { NoteMonoLatchNode } from './note-mono-latch-node';
import { DebugNode } from '../general/debug-node';
import { MidiplexMessage } from '../../midiplex-message';
import { Util } from '../../util/util';

let debug = new DebugNode('debug');
let node = new NoteMonoLatchNode('latch-node');
    node.connect('out', debug.getInputEdge('in'));

describe('NoteMonoLatchNode', () => {
    test('noteoff message is generated by sending the same noteon message twice in a row', (done) => {

        let n1 = Util.Generate.noteon('C#1', 127);
        let n2 = Util.Generate.noteon('C#1', 127);
        // let n3 = Util.Note.off(n1);
        let counter = 0;

        debug.setProp('callback', (m: MidiplexMessage) => {
            /**
             * First noteon should come through
             */
            if (counter === 0){
                expect(m.type).toEqual('noteon');
                counter++;
                return;
            }
            /**
             * Second noteon should be converted to noteoff, ending the latch
             */
            expect(m.type).toEqual('noteoff');
            done();
        });

        node.receive(n1, 'in'); //Should not be received by debug node
        node.receive(n2, 'in'); //Should be received by debug node
    });

    test('noteon is latched until another noteon message is received', (done) => {

        let n1 = Util.Generate.noteon(60, 127);
        let n2 = Util.Generate.noteon(72, 127);
        let counter = 0;
        debug.setProp('callback', (m: MidiplexMessage) => {
            /**
             * First noteon should come through
             */
            if (counter === 0){
                expect(m.type).toEqual('noteon');
                expect(m.data[1]).toEqual(60);
                counter++;
                return;
            } else if (counter === 1){
                /**
                 * When second noteon is sent, our node should first send a noteoff for the first noteon
                 */
                expect(m.type).toEqual('noteoff');
                expect(m.data[1]).toEqual(60);
                counter++;
                return;
            }

            /**
             * Second noteon should come through
             */
            expect(m.type).toEqual('noteon');
            expect(m.data[1]).toEqual(72);
            done();
        });

        node.receive(n1, 'in'); //Should not be received by debug node
        node.receive(n2, 'in'); //Should be received by debug node
    });
});



