!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports):"function"==typeof define&&define.amd?define(["exports"],factory):factory((global="undefined"!=typeof globalThis?globalThis:global||self).Midiplex={})}(this,(function(exports){"use strict";let EventEmitter$1=class EventEmitter{constructor(eventsSuspended=!1){this.eventMap={},this.eventsSuspended=1==eventsSuspended}addListener(event,callback,options={}){if("string"==typeof event&&event.length<1||event instanceof String&&event.length<1||"string"!=typeof event&&!(event instanceof String)&&event!==EventEmitter.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if("function"!=typeof callback)throw new TypeError("The callback must be a function.");const listener=new Listener(event,this,callback,options);return this.eventMap[event]||(this.eventMap[event]=[]),options.prepend?this.eventMap[event].unshift(listener):this.eventMap[event].push(listener),listener}addOneTimeListener(event,callback,options={}){options.remaining=1,this.addListener(event,callback,options)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(event,callback){if(void 0===event)return!!(this.eventMap[EventEmitter.ANY_EVENT]&&this.eventMap[EventEmitter.ANY_EVENT].length>0)||Object.entries(this.eventMap).some((([,value])=>value.length>0));if(this.eventMap[event]&&this.eventMap[event].length>0){if(callback instanceof Listener){return this.eventMap[event].filter((listener=>listener===callback)).length>0}if("function"==typeof callback){return this.eventMap[event].filter((listener=>listener.callback===callback)).length>0}return null==callback}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(event){return this.eventMap[event]||[]}suspendEvent(event){this.getListeners(event).forEach((listener=>{listener.suspended=!0}))}unsuspendEvent(event){this.getListeners(event).forEach((listener=>{listener.suspended=!1}))}getListenerCount(event){return this.getListeners(event).length}emit(event,...args){if("string"!=typeof event&&!(event instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let results=[],listeners=this.eventMap[EventEmitter.ANY_EVENT]||[];return this.eventMap[event]&&(listeners=listeners.concat(this.eventMap[event])),listeners.forEach((listener=>{if(listener.suspended)return;let params=[...args];Array.isArray(listener.arguments)&&(params=params.concat(listener.arguments)),listener.remaining>0&&(results.push(listener.callback.apply(listener.context,params)),listener.count++),--listener.remaining<1&&listener.remove()})),results}removeListener(event,callback,options={}){if(void 0===event)return void(this.eventMap={});if(!this.eventMap[event])return;let listeners=this.eventMap[event].filter((listener=>callback&&listener.callback!==callback||options.remaining&&options.remaining!==listener.remaining||options.context&&options.context!==listener.context));listeners.length?this.eventMap[event]=listeners:delete this.eventMap[event]}async waitFor(event,options={}){return options.duration=parseInt(options.duration),(isNaN(options.duration)||options.duration<=0)&&(options.duration=1/0),new Promise(((resolve,reject)=>{let timeout,listener=this.addListener(event,(()=>{clearTimeout(timeout),resolve()}),{remaining:1});options.duration!==1/0&&(timeout=setTimeout((()=>{listener.remove(),reject("The duration expired before the event was emitted.")}),options.duration))}))}get eventCount(){return Object.keys(this.eventMap).length}};class Listener{constructor(event,target,callback,options={}){if("string"!=typeof event&&!(event instanceof String)&&event!==EventEmitter$1.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!target)throw new ReferenceError("The 'target' parameter is mandatory.");if("function"!=typeof callback)throw new TypeError("The 'callback' must be a function.");void 0===options.arguments||Array.isArray(options.arguments)||(options.arguments=[options.arguments]),(options=Object.assign({context:target,remaining:1/0,arguments:void 0,duration:1/0},options)).duration!==1/0&&setTimeout((()=>this.remove()),options.duration),this.arguments=options.arguments,this.callback=callback,this.context=options.context,this.count=0,this.event=event,this.remaining=parseInt(options.remaining)>=1?parseInt(options.remaining):1/0,this.suspended=!1,this.target=target}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}
/**
   * The `Enumerations` class contains enumerations and arrays of elements used throughout the
   * library. All its properties are static and should be referenced using the class name. For
   * example: `Enumerations.CHANNEL_MESSAGES`.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */class Enumerations{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),Enumerations.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),Enumerations.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),Enumerations.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),Enumerations.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}
/**
   * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
   *
   * `Note` objects can be played back on a single channel by calling
   * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
   * output, by calling [`Output.playNote()`]{@link Output#playNote}.
   *
   * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
   * These can be changed by passing in the appropriate option. It is also possible to set a
   * system-wide default for attack and release velocities by using the
   * [`WebMidi.defaults`](WebMidi#defaults) property.
   *
   * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
   * [`rawRelease`](#rawRelease) to both get and set the values.
   *
   * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
   * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
   * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
   * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
   * [`Output.stopNote()`]{@link Output#stopNote} or similar.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */class Note{constructor(value,options={}){this.duration=wm.defaults.note.duration,this.attack=wm.defaults.note.attack,this.release=wm.defaults.note.release,null!=options.duration&&(this.duration=options.duration),null!=options.attack&&(this.attack=options.attack),null!=options.rawAttack&&(this.attack=Utilities.from7bitToFloat(options.rawAttack)),null!=options.release&&(this.release=options.release),null!=options.rawRelease&&(this.release=Utilities.from7bitToFloat(options.rawRelease)),Number.isInteger(value)?this.identifier=Utilities.toNoteIdentifier(value):this.identifier=value}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(value){const fragments=Utilities.getNoteDetails(value);if(wm.validation&&!value)throw new Error("Invalid note identifier");this._name=fragments.name,this._accidental=fragments.accidental,this._octave=fragments.octave}get name(){return this._name}set name(value){if(wm.validation&&(value=value.toUpperCase(),!["C","D","E","F","G","A","B"].includes(value)))throw new Error("Invalid name value");this._name=value}get accidental(){return this._accidental}set accidental(value){if(wm.validation&&(value=value.toLowerCase(),!["#","##","b","bb"].includes(value)))throw new Error("Invalid accidental value");this._accidental=value}get octave(){return this._octave}set octave(value){if(wm.validation&&(value=parseInt(value),isNaN(value)))throw new Error("Invalid octave value");this._octave=value}get duration(){return this._duration}set duration(value){if(wm.validation&&(value=parseFloat(value),isNaN(value)||null===value||value<0))throw new RangeError("Invalid duration value.");this._duration=value}get attack(){return this._attack}set attack(value){if(wm.validation&&(value=parseFloat(value),isNaN(value)||!(value>=0&&value<=1)))throw new RangeError("Invalid attack value.");this._attack=value}get release(){return this._release}set release(value){if(wm.validation&&(value=parseFloat(value),isNaN(value)||!(value>=0&&value<=1)))throw new RangeError("Invalid release value.");this._release=value}get rawAttack(){return Utilities.fromFloatTo7Bit(this._attack)}set rawAttack(value){this._attack=Utilities.from7bitToFloat(value)}get rawRelease(){return Utilities.fromFloatTo7Bit(this._release)}set rawRelease(value){this._release=Utilities.from7bitToFloat(value)}get number(){return Utilities.toNoteNumber(this.identifier)}getOffsetNumber(octaveOffset=0,semitoneOffset=0){return wm.validation&&(octaveOffset=parseInt(octaveOffset)||0,semitoneOffset=parseInt(semitoneOffset)||0),Math.min(Math.max(this.number+12*octaveOffset+semitoneOffset,0),127)}}
/**
   * The `Utilities` class contains general-purpose utility methods. All methods are static and
   * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */class Utilities{
/**
     * Returns a MIDI note number matching the identifier passed in the form of a string. The
     * identifier must include the octave number. The identifier also optionally include a sharp (#),
     * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid
     * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.
     *
     * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number
     * 60) as per the scientific pitch notation standard.
     *
     * The resulting note number can be offset by using the `octaveOffset` parameter.
     *
     * @param identifier {string} The identifier in the form of a letter, followed by an optional "#",
     * "##", "b" or "bb" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,
     * Abb4, B##6, etc.
     *
     * @param {number} [octaveOffset=0] A integer to offset the octave by.
     *
     * @returns {number} The MIDI note number (an integer between 0 and 127).
     *
     * @throws RangeError Invalid 'octaveOffset' value
     *
     * @throws TypeError Invalid note identifier
     *
     * @license Apache-2.0
     * @since 3.0.0
     * @static
     */
static toNoteNumber(identifier,octaveOffset=0){if(octaveOffset=null==octaveOffset?0:parseInt(octaveOffset),isNaN(octaveOffset))throw new RangeError("Invalid 'octaveOffset' value");"string"!=typeof identifier&&(identifier="");const fragments=this.getNoteDetails(identifier);if(!fragments)throw new TypeError("Invalid note identifier");let result=12*(fragments.octave+1+octaveOffset);if(result+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[fragments.name],fragments.accidental&&(fragments.accidental.startsWith("b")?result-=fragments.accidental.length:result+=fragments.accidental.length),result<0||result>127)throw new RangeError("Invalid octaveOffset value");return result}static getNoteDetails(value){Number.isInteger(value)&&(value=this.toNoteIdentifier(value));const matches=value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!matches)throw new TypeError("Invalid note identifier");const name=matches[1].toUpperCase(),octave=parseInt(matches[3]);let accidental=matches[2].toLowerCase();accidental=""===accidental?void 0:accidental;return{accidental:accidental,identifier:name+(accidental||"")+octave,name:name,octave:octave}}static sanitizeChannels(channel){let channels;if(wm.validation)if("all"===channel)channels=["all"];else if("none"===channel)return[];return channels=Array.isArray(channel)?channel:[channel],channels.indexOf("all")>-1&&(channels=Enumerations.MIDI_CHANNEL_NUMBERS),channels.map((function(ch){return parseInt(ch)})).filter((function(ch){return ch>=1&&ch<=16}))}static toTimestamp(time){let value=!1;const parsed=parseFloat(time);return!isNaN(parsed)&&("string"==typeof time&&"+"===time.substring(0,1)?parsed>=0&&(value=wm.time+parsed):parsed>=0&&(value=parsed),value)}static guessNoteNumber(input,octaveOffset){octaveOffset=parseInt(octaveOffset)||0;let output=!1;if(Number.isInteger(input)&&input>=0&&input<=127)output=parseInt(input);else if(parseInt(input)>=0&&parseInt(input)<=127)output=parseInt(input);else if("string"==typeof input||input instanceof String)try{output=this.toNoteNumber(input.trim(),octaveOffset)}catch(e){return!1}return output}static toNoteIdentifier(number,octaveOffset){if(number=parseInt(number),isNaN(number)||number<0||number>127)throw new RangeError("Invalid note number");if(octaveOffset=null==octaveOffset?0:parseInt(octaveOffset),isNaN(octaveOffset))throw new RangeError("Invalid octaveOffset value");const octave=Math.floor(number/12-1)+octaveOffset;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][number%12]+octave.toString()}static buildNote(input,options={}){if(options.octaveOffset=parseInt(options.octaveOffset)||0,input instanceof Note)return input;let number=this.guessNoteNumber(input,options.octaveOffset);if(!1===number)throw new TypeError(`The input could not be parsed as a note (${input})`);return options.octaveOffset=void 0,new Note(number,options)}static buildNoteArray(notes,options={}){let result=[];return Array.isArray(notes)||(notes=[notes]),notes.forEach((note=>{result.push(this.buildNote(note,options))})),result}static from7bitToFloat(value){return value===1/0&&(value=127),value=parseInt(value)||0,Math.min(Math.max(value/127,0),1)}static fromFloatTo7Bit(value){return value===1/0&&(value=1),value=parseFloat(value)||0,Math.min(Math.max(Math.round(127*value),0),127)}static fromMsbLsbToFloat(msb,lsb=0){wm.validation&&(msb=Math.min(Math.max(parseInt(msb)||0,0),127),lsb=Math.min(Math.max(parseInt(lsb)||0,0),127));const value=((msb<<7)+lsb)/16383;return Math.min(Math.max(value,0),1)}static fromFloatToMsbLsb(value){wm.validation&&(value=Math.min(Math.max(parseFloat(value)||0,0),1));const multiplied=Math.round(16383*value);return{msb:multiplied>>7,lsb:127&multiplied}}static offsetNumber(number,octaveOffset=0,semitoneOffset=0){if(wm.validation){if(number=parseInt(number),isNaN(number))throw new Error("Invalid note number");octaveOffset=parseInt(octaveOffset)||0,semitoneOffset=parseInt(semitoneOffset)||0}return Math.min(Math.max(number+12*octaveOffset+semitoneOffset,0),127)}static getPropertyByValue(object,value){return Object.keys(object).find((key=>object[key]===value))}static getCcNameByNumber(number){if(!wm.validation||(number=parseInt(number))>=0&&number<=127)return Enumerations.CONTROL_CHANGE_MESSAGES[number].name}static getCcNumberByName(name){let message=Enumerations.CONTROL_CHANGE_MESSAGES.find((element=>element.name===name));return message?message.number:Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name]}static getChannelModeByNumber(number){if(!(number>=120&&number<=127))return!1;for(let cm in Enumerations.CHANNEL_MODE_MESSAGES)if(Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm)&&number===Enumerations.CHANNEL_MODE_MESSAGES[cm])return cm;return!1}static get isNode(){return"undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node}static get isBrowser(){return"undefined"!=typeof window&&void 0!==window.document}}
/**
   * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
   * provided by an [`Output`](Output) port which, itself, is made available by a device. The
   * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
   * directly.
   *
   * All 16 `OutputChannel` objects can be found inside the parent output's
   * [`channels`]{@link Output#channels} property.
   *
   * @param {Output} output The [`Output`](Output) this channel belongs to.
   * @param {number} number The MIDI channel number (`1` - `16`).
   *
   * @extends EventEmitter
   * @license Apache-2.0
   * @since 3.0.0
   */class OutputChannel extends EventEmitter$1{constructor(output,number){super(),this._output=output,this._number=number,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(message,options={time:0}){return this.output.send(message,options),this}sendKeyAftertouch(target,pressure,options={}){if(wm.validation){if(options.useRawValue&&(options.rawValue=options.useRawValue),isNaN(parseFloat(pressure)))throw new RangeError("Invalid key aftertouch value.");if(options.rawValue){if(!(pressure>=0&&pressure<=127&&Number.isInteger(pressure)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(pressure>=0&&pressure<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}options.rawValue||(pressure=Utilities.fromFloatTo7Bit(pressure));const offset=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(target)||(target=[target]),Utilities.buildNoteArray(target).forEach((n=>{this.send([(Enumerations.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),n.getOffsetNumber(offset),pressure],{time:Utilities.toTimestamp(options.time)})})),this}
/**
     * Sends a MIDI **control change** message to the channel at the scheduled time. The control
     * change message to send can be specified numerically (`0` to `127`) or by using one of the
     * following common names:
     *
     * | Number | Name                          |
     * |--------|-------------------------------|
     * | 0      |`bankselectcoarse`             |
     * | 1      |`modulationwheelcoarse`        |
     * | 2      |`breathcontrollercoarse`       |
     * | 4      |`footcontrollercoarse`         |
     * | 5      |`portamentotimecoarse`         |
     * | 6      |`dataentrycoarse`              |
     * | 7      |`volumecoarse`                 |
     * | 8      |`balancecoarse`                |
     * | 10     |`pancoarse`                    |
     * | 11     |`expressioncoarse`             |
     * | 12     |`effectcontrol1coarse`         |
     * | 13     |`effectcontrol2coarse`         |
     * | 18     |`generalpurposeslider3`        |
     * | 19     |`generalpurposeslider4`        |
     * | 32     |`bankselectfine`               |
     * | 33     |`modulationwheelfine`          |
     * | 34     |`breathcontrollerfine`         |
     * | 36     |`footcontrollerfine`           |
     * | 37     |`portamentotimefine`           |
     * | 38     |`dataentryfine`                |
     * | 39     |`volumefine`                   |
     * | 40     |`balancefine`                  |
     * | 42     |`panfine`                      |
     * | 43     |`expressionfine`               |
     * | 44     |`effectcontrol1fine`           |
     * | 45     |`effectcontrol2fine`           |
     * | 64     |`holdpedal`                    |
     * | 65     |`portamento`                   |
     * | 66     |`sustenutopedal`               |
     * | 67     |`softpedal`                    |
     * | 68     |`legatopedal`                  |
     * | 69     |`hold2pedal`                   |
     * | 70     |`soundvariation`               |
     * | 71     |`resonance`                    |
     * | 72     |`soundreleasetime`             |
     * | 73     |`soundattacktime`              |
     * | 74     |`brightness`                   |
     * | 75     |`soundcontrol6`                |
     * | 76     |`soundcontrol7`                |
     * | 77     |`soundcontrol8`                |
     * | 78     |`soundcontrol9`                |
     * | 79     |`soundcontrol10`               |
     * | 80     |`generalpurposebutton1`        |
     * | 81     |`generalpurposebutton2`        |
     * | 82     |`generalpurposebutton3`        |
     * | 83     |`generalpurposebutton4`        |
     * | 91     |`reverblevel`                  |
     * | 92     |`tremololevel`                 |
     * | 93     |`choruslevel`                  |
     * | 94     |`celestelevel`                 |
     * | 95     |`phaserlevel`                  |
     * | 96     |`dataincrement`                |
     * | 97     |`datadecrement`                |
     * | 98     |`nonregisteredparametercoarse` |
     * | 99     |`nonregisteredparameterfine`   |
     * | 100    |`registeredparametercoarse`    |
     * | 101    |`registeredparameterfine`      |
     * | 120    |`allsoundoff`                  |
     * | 121    |`resetallcontrollers`          |
     * | 122    |`localcontrol`                 |
     * | 123    |`allnotesoff`                  |
     * | 124    |`omnimodeoff`                  |
     * | 125    |`omnimodeon`                   |
     * | 126    |`monomodeon`                   |
     * | 127    |`polymodeon`                   |
     *
     * As you can see above, not all control change message have a matching name. This does not mean
     * you cannot use the others. It simply means you will need to use their number
     * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are
     * usually reserved for *channel mode* messages. See
     * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.
     *
     * To view a detailed list of all available **control change** messages, please consult "Table 3 -
     * Control Change Messages" from the [MIDI Messages](
     * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)
     * specification.
     *
     * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1
     * (`modulationwheelcoarse`) can be accompanied by a second control change message for
     * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB
     * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the
     * second parameter.
     *
     * @param {number|string} controller The MIDI controller name or number (`0` - `127`).
     *
     * @param {number|number[]} value The value to send (0-127). You can also use a two-position array
     * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second
     * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first
     * controller)
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} Controller numbers must be between 0 and 127.
     * @throws {RangeError} Invalid controller name.
     * @throws {TypeError} The value array must have a length of 2.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */sendControlChange(controller,value,options={}){if("string"==typeof controller&&(controller=Utilities.getCcNumberByName(controller)),Array.isArray(value)||(value=[value]),wm.validation){if(void 0===controller)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(controller)||!(controller>=0&&controller<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(2===(value=value.map((item=>{const output=Math.min(Math.max(parseInt(item),0),127);if(isNaN(output))throw new TypeError("Values must be integers between 0 and 127");return output}))).length&&controller>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return value.forEach(((item,index)=>{this.send([(Enumerations.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),controller+32*index,value[index]],{time:Utilities.toTimestamp(options.time)})})),this}_selectNonRegisteredParameter(parameter,options={}){return this.sendControlChange(99,parameter[0],options),this.sendControlChange(98,parameter[1],options),this}_deselectRegisteredParameter(options={}){return this.sendControlChange(101,127,options),this.sendControlChange(100,127,options),this}_deselectNonRegisteredParameter(options={}){return this.sendControlChange(101,127,options),this.sendControlChange(100,127,options),this}_selectRegisteredParameter(parameter,options={}){return this.sendControlChange(101,parameter[0],options),this.sendControlChange(100,parameter[1],options),this}_setCurrentParameter(data,options={}){return data=[].concat(data),this.sendControlChange(6,data[0],options),data.length<2||this.sendControlChange(38,data[1],options),this}sendRpnDecrement(parameter,options={}){if(Array.isArray(parameter)||(parameter=Enumerations.REGISTERED_PARAMETERS[parameter]),wm.validation){if(void 0===parameter)throw new TypeError("The specified registered parameter is invalid.");let valid=!1;if(Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach((p=>{Enumerations.REGISTERED_PARAMETERS[p][0]===parameter[0]&&Enumerations.REGISTERED_PARAMETERS[p][1]===parameter[1]&&(valid=!0)})),!valid)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(parameter,options),this.sendControlChange(97,0,options),this._deselectRegisteredParameter(options),this}sendRpnIncrement(parameter,options={}){if(Array.isArray(parameter)||(parameter=Enumerations.REGISTERED_PARAMETERS[parameter]),wm.validation){if(void 0===parameter)throw new TypeError("The specified registered parameter is invalid.");let valid=!1;if(Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach((p=>{Enumerations.REGISTERED_PARAMETERS[p][0]===parameter[0]&&Enumerations.REGISTERED_PARAMETERS[p][1]===parameter[1]&&(valid=!0)})),!valid)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(parameter,options),this.sendControlChange(96,0,options),this._deselectRegisteredParameter(options),this}playNote(note,options={}){this.sendNoteOn(note,options);const notes=Array.isArray(note)?note:[note];for(let note of notes)if(parseInt(note.duration)>0){const noteOffOptions={time:(Utilities.toTimestamp(options.time)||wm.time)+parseInt(note.duration),release:note.release,rawRelease:note.rawRelease};this.sendNoteOff(note,noteOffOptions)}else if(parseInt(options.duration)>0){const noteOffOptions={time:(Utilities.toTimestamp(options.time)||wm.time)+parseInt(options.duration),release:options.release,rawRelease:options.rawRelease};this.sendNoteOff(note,noteOffOptions)}return this}sendNoteOff(note,options={}){if(wm.validation){if(null!=options.rawRelease&&!(options.rawRelease>=0&&options.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(null!=options.release&&!(options.release>=0&&options.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");options.rawVelocity&&(options.rawRelease=options.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),options.velocity&&(options.release=options.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let nVelocity=64;null!=options.rawRelease?nVelocity=options.rawRelease:isNaN(options.release)||(nVelocity=Math.round(127*options.release));const offset=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Utilities.buildNoteArray(note,{rawRelease:parseInt(nVelocity)}).forEach((n=>{this.send([(Enumerations.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),n.getOffsetNumber(offset),n.rawRelease],{time:Utilities.toTimestamp(options.time)})})),this}stopNote(note,options={}){return this.sendNoteOff(note,options)}sendNoteOn(note,options={}){if(wm.validation){if(null!=options.rawAttack&&!(options.rawAttack>=0&&options.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(null!=options.attack&&!(options.attack>=0&&options.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");options.rawVelocity&&(options.rawAttack=options.velocity,options.rawRelease=options.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),options.velocity&&(options.attack=options.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let nVelocity=64;null!=options.rawAttack?nVelocity=options.rawAttack:isNaN(options.attack)||(nVelocity=Math.round(127*options.attack));const offset=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Utilities.buildNoteArray(note,{rawAttack:nVelocity}).forEach((n=>{this.send([(Enumerations.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),n.getOffsetNumber(offset),n.rawAttack],{time:Utilities.toTimestamp(options.time)})})),this}sendChannelMode(command,value=0,options={}){if("string"==typeof command&&(command=Enumerations.CHANNEL_MODE_MESSAGES[command]),wm.validation){if(void 0===command)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(command)||!(command>=120&&command<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(value))||value<0||value>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(Enumerations.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),command,value],{time:Utilities.toTimestamp(options.time)}),this}sendOmniMode(state,options={}){return void 0===state||state?this.sendChannelMode("omnimodeon",0,options):this.sendChannelMode("omnimodeoff",0,options),this}sendChannelAftertouch(pressure,options={}){if(wm.validation){if(isNaN(parseFloat(pressure)))throw new RangeError("Invalid channel aftertouch value.");if(options.rawValue){if(!(pressure>=0&&pressure<=127&&Number.isInteger(pressure)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(pressure>=0&&pressure<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(Enumerations.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(127*pressure)],{time:Utilities.toTimestamp(options.time)}),this}sendMasterTuning(value,options={}){if(value=parseFloat(value)||0,wm.validation&&!(value>-65&&value<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let coarse=Math.floor(value)+64,fine=value-Math.floor(value);fine=Math.round((fine+1)/2*16383);let msb=fine>>7&127,lsb=127&fine;return this.sendRpnValue("channelcoarsetuning",coarse,options),this.sendRpnValue("channelfinetuning",[msb,lsb],options),this}sendModulationRange(semitones,cents,options={}){if(wm.validation){if(!Number.isInteger(semitones)||!(semitones>=0&&semitones<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(null==cents||Number.isInteger(cents)&&cents>=0&&cents<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return cents>=0&&cents<=127||(cents=0),this.sendRpnValue("modulationrange",[semitones,cents],options),this}sendNrpnValue(nrpn,data,options={}){if(data=[].concat(data),wm.validation){if(!Array.isArray(nrpn)||!Number.isInteger(nrpn[0])||!Number.isInteger(nrpn[1]))throw new TypeError("The specified NRPN is invalid.");if(!(nrpn[0]>=0&&nrpn[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(nrpn[1]>=0&&nrpn[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");data.forEach((value=>{if(!(value>=0&&value<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")}))}return this._selectNonRegisteredParameter(nrpn,options),this._setCurrentParameter(data,options),this._deselectNonRegisteredParameter(options),this}sendPitchBend(value,options={}){if(wm.validation)if(options.rawValue&&Array.isArray(value)){if(!(value[0]>=0&&value[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(value[1]>=0&&value[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(options.rawValue&&!Array.isArray(value)){if(!(value>=0&&value<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(value)||null===value)throw new RangeError("Invalid pitch bend value.");if(!(value>=-1&&value<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let msb=0,lsb=0;if(options.rawValue&&Array.isArray(value))msb=value[0],lsb=value[1];else if(options.rawValue&&!Array.isArray(value))msb=value;else{const result=Utilities.fromFloatToMsbLsb((value+1)/2);msb=result.msb,lsb=result.lsb}return this.send([(Enumerations.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),lsb,msb],{time:Utilities.toTimestamp(options.time)}),this}sendPitchBendRange(semitones,cents,options={}){if(wm.validation){if(!Number.isInteger(semitones)||!(semitones>=0&&semitones<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(cents)||!(cents>=0&&cents<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[semitones,cents],options),this}sendProgramChange(program,options={}){if(program=parseInt(program)||0,wm.validation&&!(program>=0&&program<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(Enumerations.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),program],{time:Utilities.toTimestamp(options.time)}),this}sendRpnValue(rpn,data,options={}){if(Array.isArray(rpn)||(rpn=Enumerations.REGISTERED_PARAMETERS[rpn]),wm.validation){if(!Number.isInteger(rpn[0])||!Number.isInteger(rpn[1]))throw new TypeError("The specified NRPN is invalid.");if(!(rpn[0]>=0&&rpn[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(rpn[1]>=0&&rpn[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(data).forEach((value=>{if(!(value>=0&&value<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")}))}return this._selectRegisteredParameter(rpn,options),this._setCurrentParameter(data,options),this._deselectRegisteredParameter(options),this}sendTuningBank(value,options={}){if(wm.validation&&(!Number.isInteger(value)||!(value>=0&&value<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",value,options),this}sendTuningProgram(value,options={}){if(wm.validation&&(!Number.isInteger(value)||!(value>=0&&value<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",value,options),this}sendLocalControl(state,options={}){return state?this.sendChannelMode("localcontrol",127,options):this.sendChannelMode("localcontrol",0,options)}sendAllNotesOff(options={}){return this.sendChannelMode("allnotesoff",0,options)}sendAllSoundOff(options={}){return this.sendChannelMode("allsoundoff",0,options)}sendResetAllControllers(options={}){return this.sendChannelMode("resetallcontrollers",0,options)}sendPolyphonicMode(mode,options={}){return"mono"===mode?this.sendChannelMode("monomodeon",0,options):this.sendChannelMode("polymodeon",0,options)}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get output(){return this._output}get number(){return this._number}}
/**
   * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
   * A port is made available by a MIDI device. A MIDI device can advertise several input and output
   * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
   * property.
   *
   * The `Output` object is automatically instantiated by the library according to the host's MIDI
   * subsystem and should not be directly instantiated.
   *
   * You can access all available `Output` objects by referring to the
   * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
   * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
   * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
   *
   * @fires Output#opened
   * @fires Output#disconnected
   * @fires Output#closed
   *
   * @extends EventEmitter
   * @license Apache-2.0
   */class Output extends EventEmitter$1{constructor(midiOutput){super(),this._midiOutput=midiOutput,this._octaveOffset=0,this.channels=[];for(let i=1;i<=16;i++)this.channels[i]=new OutputChannel(this,i);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach((ch=>ch.destroy())),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(e){let event={timestamp:wm.time};"open"===e.port.connection?(event.type="opened",event.target=this,event.port=event.target,this.emit("opened",event)):"closed"===e.port.connection&&"connected"===e.port.state?(event.type="closed",event.target=this,event.port=event.target,this.emit("closed",event)):"closed"===e.port.connection&&"disconnected"===e.port.state?(event.type="disconnected",event.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",event)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(err){return Promise.reject(err)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}
/**
     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be
     * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a
     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}
     * object or a [`Message`](Message) object.
     *
     * It is usually not necessary to use this method directly as you can use one of the simpler
     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),
     * [`sendControlChange()`](#sendControlChange), etc.
     *
     * Details on the format of MIDI messages are available in the summary of
     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}
     * from the MIDI Manufacturers Association.
     *
     * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`
     * object (not available in Node.js) containing the message bytes or a `Message` object.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @license Apache-2.0
     */send(message,options={time:0},legacy=0){if(message instanceof Message&&(message=Utilities.isNode?message.data:message.rawData),message instanceof Uint8Array&&Utilities.isNode&&(message=Array.from(message)),wm.validation){if(Array.isArray(message)||message instanceof Uint8Array||(message=[message],Array.isArray(options)&&(message=message.concat(options)),options=isNaN(legacy)?{time:0}:{time:legacy}),!(parseInt(message[0])>=128&&parseInt(message[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");message.slice(1).forEach((value=>{if(!((value=parseInt(value))>=0&&value<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")})),options||(options={time:0})}return this._midiOutput.send(message,Utilities.toTimestamp(options.time)),this}sendSysex(identification,data=[],options={}){if(identification=[].concat(identification),data instanceof Uint8Array){const merged=new Uint8Array(1+identification.length+data.length+1);merged[0]=Enumerations.SYSTEM_MESSAGES.sysex,merged.set(Uint8Array.from(identification),1),merged.set(data,1+identification.length),merged[merged.length-1]=Enumerations.SYSTEM_MESSAGES.sysexend,this.send(merged,{time:options.time})}else{const merged=identification.concat(data,Enumerations.SYSTEM_MESSAGES.sysexend);this.send([Enumerations.SYSTEM_MESSAGES.sysex].concat(merged),{time:options.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():wm.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(value,options={}){if(wm.validation&&(value=parseInt(value),isNaN(value)||!(value>=0&&value<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([Enumerations.SYSTEM_MESSAGES.timecode,value],{time:options.time}),this}sendSongPosition(value=0,options={}){var msb=(value=Math.floor(value)||0)>>7&127,lsb=127&value;return this.send([Enumerations.SYSTEM_MESSAGES.songposition,msb,lsb],{time:options.time}),this}sendSongSelect(value=0,options={}){if(wm.validation&&(value=parseInt(value),isNaN(value)||!(value>=0&&value<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([Enumerations.SYSTEM_MESSAGES.songselect,value],{time:options.time}),this}sendTuneRequest(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.tunerequest],{time:options.time}),this}sendClock(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.clock],{time:options.time}),this}sendStart(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.start],{time:options.time}),this}sendContinue(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.continue],{time:options.time}),this}sendStop(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.stop],{time:options.time}),this}sendActiveSensing(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.activesensing],{time:options.time}),this}sendReset(options={}){return this.send([Enumerations.SYSTEM_MESSAGES.reset],{time:options.time}),this}sendTuningRequest(options={}){return wm.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(options)}sendKeyAftertouch(note,pressure,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendKeyAftertouch(note,pressure,options)})),this}sendControlChange(controller,value,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendControlChange(controller,value,options)})),this}sendPitchBendRange(semitones=0,cents=0,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendPitchBendRange(semitones,cents,options)})),this}setPitchBendRange(semitones=0,cents=0,channel="all",options={}){return wm.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(semitones,cents,options)}sendRpnValue(parameter,data,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendRpnValue(parameter,data,options)})),this}setRegisteredParameter(parameter,data=[],channel="all",options={}){return wm.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(parameter,data,options)}sendChannelAftertouch(pressure,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendChannelAftertouch(pressure,options)})),this}sendPitchBend(value,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendPitchBend(value,options)})),this}sendProgramChange(program=0,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendProgramChange(program,options)})),this}sendModulationRange(semitones,cents,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendModulationRange(semitones,cents,options)})),this}setModulationRange(semitones=0,cents=0,channel="all",options={}){return wm.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(semitones,cents,options)}sendMasterTuning(value,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendMasterTuning(value,options)})),this}setMasterTuning(value,channel={},options={}){return wm.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(value,options)}sendTuningProgram(value,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendTuningProgram(value,options)})),this}setTuningProgram(value,channel="all",options={}){return wm.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(value,options)}sendTuningBank(value=0,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendTuningBank(value,options)})),this}setTuningBank(parameter,channel="all",options={}){return wm.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(parameter,options)}sendChannelMode(command,value=0,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendChannelMode(command,value,options)})),this}sendAllSoundOff(options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendAllSoundOff(options)})),this}sendAllNotesOff(options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendAllNotesOff(options)})),this}sendResetAllControllers(options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendResetAllControllers(options)})),this}sendPolyphonicMode(mode,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendPolyphonicMode(mode,options)})),this}sendLocalControl(state,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendLocalControl(state,options)})),this}sendOmniMode(state,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendOmniMode(state,options)})),this}sendNrpnValue(parameter,data,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendNrpnValue(parameter,data,options)})),this}setNonRegisteredParameter(parameter,data=[],channel="all",options={}){return wm.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(parameter,data,options)}sendRpnIncrement(parameter,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendRpnIncrement(parameter,options)})),this}incrementRegisteredParameter(parameter,channel="all",options={}){return wm.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(parameter,options)}sendRpnDecrement(parameter,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendRpnDecrement(parameter,options)})),this}decrementRegisteredParameter(parameter,channel="all",options={}){return wm.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(parameter,options)}sendNoteOff(note,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendNoteOff(note,options)})),this}stopNote(note,options){return this.sendNoteOff(note,options)}playNote(note,options={},legacy={}){if(wm.validation&&(options.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),options.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].playNote(note,options)})),this}sendNoteOn(note,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].sendNoteOn(note,options)})),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}}
/**
   * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
   * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
   * to all the outputs listed in its [`destinations`](#destinations) property.
   *
   * If specific channels or message types have been defined in the [`channels`](#channels) or
   * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
   *
   * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
   * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */class Forwarder{constructor(destinations=[],options={}){this.destinations=[],this.types=[...Object.keys(Enumerations.SYSTEM_MESSAGES),...Object.keys(Enumerations.CHANNEL_MESSAGES)],this.channels=Enumerations.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(destinations)||(destinations=[destinations]),options.types&&!Array.isArray(options.types)&&(options.types=[options.types]),options.channels&&!Array.isArray(options.channels)&&(options.channels=[options.channels]),wm.validation&&(destinations.forEach((destination=>{if(!(destination instanceof Output))throw new TypeError("Destinations must be of type 'Output'.")})),void 0!==options.types&&options.types.forEach((type=>{if(!Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type)&&!Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type))throw new TypeError("Type must be a valid message type.")})),void 0!==options.channels&&options.channels.forEach((channel=>{if(!Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel))throw new TypeError("MIDI channel must be between 1 and 16.")}))),this.destinations=destinations,options.types&&(this.types=options.types),options.channels&&(this.channels=options.channels)}forward(message){this.suspended||this.types.includes(message.type)&&(message.channel&&!this.channels.includes(message.channel)||this.destinations.forEach((destination=>{(!wm.validation||destination instanceof Output)&&destination.send(message)})))}}
/**
   * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
   * device. This object is derived from the host's MIDI subsystem and should not be instantiated
   * directly.
   *
   * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
   * property.
   *
   * @fires InputChannel#midimessage
   * @fires InputChannel#unknownmessage
   *
   * @fires InputChannel#noteoff
   * @fires InputChannel#noteon
   * @fires InputChannel#keyaftertouch
   * @fires InputChannel#programchange
   * @fires InputChannel#channelaftertouch
   * @fires InputChannel#pitchbend
   *
   * @fires InputChannel#allnotesoff
   * @fires InputChannel#allsoundoff
   * @fires InputChannel#localcontrol
   * @fires InputChannel#monomode
   * @fires InputChannel#omnimode
   * @fires InputChannel#resetallcontrollers
   *
   * @fires InputChannel#event:nrpn
   * @fires InputChannel#event:nrpn-dataentrycoarse
   * @fires InputChannel#event:nrpn-dataentryfine
   * @fires InputChannel#event:nrpn-dataincrement
   * @fires InputChannel#event:nrpn-datadecrement
   * @fires InputChannel#event:rpn
   * @fires InputChannel#event:rpn-dataentrycoarse
   * @fires InputChannel#event:rpn-dataentryfine
   * @fires InputChannel#event:rpn-dataincrement
   * @fires InputChannel#event:rpn-datadecrement
   *
   * @fires InputChannel#controlchange
   * @fires InputChannel#event:controlchange-controllerxxx
   * @fires InputChannel#event:controlchange-bankselectcoarse
   * @fires InputChannel#event:controlchange-modulationwheelcoarse
   * @fires InputChannel#event:controlchange-breathcontrollercoarse
   * @fires InputChannel#event:controlchange-footcontrollercoarse
   * @fires InputChannel#event:controlchange-portamentotimecoarse
   * @fires InputChannel#event:controlchange-dataentrycoarse
   * @fires InputChannel#event:controlchange-volumecoarse
   * @fires InputChannel#event:controlchange-balancecoarse
   * @fires InputChannel#event:controlchange-pancoarse
   * @fires InputChannel#event:controlchange-expressioncoarse
   * @fires InputChannel#event:controlchange-effectcontrol1coarse
   * @fires InputChannel#event:controlchange-effectcontrol2coarse
   * @fires InputChannel#event:controlchange-generalpurposecontroller1
   * @fires InputChannel#event:controlchange-generalpurposecontroller2
   * @fires InputChannel#event:controlchange-generalpurposecontroller3
   * @fires InputChannel#event:controlchange-generalpurposecontroller4
   * @fires InputChannel#event:controlchange-bankselectfine
   * @fires InputChannel#event:controlchange-modulationwheelfine
   * @fires InputChannel#event:controlchange-breathcontrollerfine
   * @fires InputChannel#event:controlchange-footcontrollerfine
   * @fires InputChannel#event:controlchange-portamentotimefine
   * @fires InputChannel#event:controlchange-dataentryfine
   * @fires InputChannel#event:controlchange-channelvolumefine
   * @fires InputChannel#event:controlchange-balancefine
   * @fires InputChannel#event:controlchange-panfine
   * @fires InputChannel#event:controlchange-expressionfine
   * @fires InputChannel#event:controlchange-effectcontrol1fine
   * @fires InputChannel#event:controlchange-effectcontrol2fine
   * @fires InputChannel#event:controlchange-damperpedal
   * @fires InputChannel#event:controlchange-portamento
   * @fires InputChannel#event:controlchange-sostenuto
   * @fires InputChannel#event:controlchange-softpedal
   * @fires InputChannel#event:controlchange-legatopedal
   * @fires InputChannel#event:controlchange-hold2
   * @fires InputChannel#event:controlchange-soundvariation
   * @fires InputChannel#event:controlchange-resonance
   * @fires InputChannel#event:controlchange-releasetime
   * @fires InputChannel#event:controlchange-attacktime
   * @fires InputChannel#event:controlchange-brightness
   * @fires InputChannel#event:controlchange-decaytime
   * @fires InputChannel#event:controlchange-vibratorate
   * @fires InputChannel#event:controlchange-vibratodepth
   * @fires InputChannel#event:controlchange-vibratodelay
   * @fires InputChannel#event:controlchange-generalpurposecontroller5
   * @fires InputChannel#event:controlchange-generalpurposecontroller6
   * @fires InputChannel#event:controlchange-generalpurposecontroller7
   * @fires InputChannel#event:controlchange-generalpurposecontroller8
   * @fires InputChannel#event:controlchange-portamentocontrol
   * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
   * @fires InputChannel#event:controlchange-effect1depth
   * @fires InputChannel#event:controlchange-effect2depth
   * @fires InputChannel#event:controlchange-effect3depth
   * @fires InputChannel#event:controlchange-effect4depth
   * @fires InputChannel#event:controlchange-effect5depth
   * @fires InputChannel#event:controlchange-dataincrement
   * @fires InputChannel#event:controlchange-datadecrement
   * @fires InputChannel#event:controlchange-nonregisteredparameterfine
   * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
   * @fires InputChannel#event:controlchange-registeredparameterfine
   * @fires InputChannel#event:controlchange-registeredparametercoarse
   * @fires InputChannel#event:controlchange-allsoundoff
   * @fires InputChannel#event:controlchange-resetallcontrollers
   * @fires InputChannel#event:controlchange-localcontrol
   * @fires InputChannel#event:controlchange-allnotesoff
   * @fires InputChannel#event:controlchange-omnimodeoff
   * @fires InputChannel#event:controlchange-omnimodeon
   * @fires InputChannel#event:controlchange-monomodeon
   * @fires InputChannel#event:controlchange-polymodeon
   * @fires InputChannel#event:
   *
   * @extends EventEmitter
   * @license Apache-2.0
   * @since 3.0.0
   */class InputChannel extends EventEmitter$1{constructor(input,number){super(),this._input=input,this._number=number,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const event=Object.assign({},e);event.port=this.input,event.target=this,event.type="midimessage",this.emit(event.type,event),this._parseEventForStandardMessages(event)}_parseEventForStandardMessages(e){const event=Object.assign({},e);event.type=event.message.type||"unknownmessage";const data1=e.message.dataBytes[0],data2=e.message.dataBytes[1];if("noteoff"===event.type||"noteon"===event.type&&0===data2)this.notesState[data1]=!1,event.type="noteoff",event.note=new Note(Utilities.offsetNumber(data1,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset),{rawAttack:0,rawRelease:data2}),event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2,event.velocity=event.note.release,event.rawVelocity=event.note.rawRelease;else if("noteon"===event.type)this.notesState[data1]=!0,event.note=new Note(Utilities.offsetNumber(data1,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset),{rawAttack:data2}),event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2,event.velocity=event.note.attack,event.rawVelocity=event.note.rawAttack;else if("keyaftertouch"===event.type)event.note=new Note(Utilities.offsetNumber(data1,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset)),event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2,event.identifier=event.note.identifier,event.key=event.note.number,event.rawKey=data1;else if("controlchange"===event.type){event.controller={number:data1,name:Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,description:Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,position:Enumerations.CONTROL_CHANGE_MESSAGES[data1].position},event.subtype=event.controller.name||"controller"+data1,event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2;const numberedEvent=Object.assign({},event);numberedEvent.type=`${event.type}-controller${data1}`,delete numberedEvent.subtype,this.emit(numberedEvent.type,numberedEvent);const namedEvent=Object.assign({},event);namedEvent.type=`${event.type}-`+Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,delete namedEvent.subtype,0!==namedEvent.type.indexOf("controller")&&this.emit(namedEvent.type,namedEvent),event.message.dataBytes[0]>=120&&this._parseChannelModeMessage(event),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(event.message.dataBytes[0])&&this._parseEventForParameterNumber(event)}else"programchange"===event.type?(event.value=data1,event.rawValue=event.value):"channelaftertouch"===event.type?(event.value=Utilities.from7bitToFloat(data1),event.rawValue=data1):"pitchbend"===event.type?(event.value=((data2<<7)+data1-8192)/8192,event.rawValue=(data2<<7)+data1):event.type="unknownmessage";this.emit(event.type,event)}_parseChannelModeMessage(e){const event=Object.assign({},e);event.type=event.controller.name,"localcontrol"===event.type&&(event.value=127===event.message.data[2],event.rawValue=event.message.data[2]),"omnimodeon"===event.type?(event.type="omnimode",event.value=!0,event.rawValue=event.message.data[2]):"omnimodeoff"===event.type&&(event.type="omnimode",event.value=!1,event.rawValue=event.message.data[2]),"monomodeon"===event.type?(event.type="monomode",event.value=!0,event.rawValue=event.message.data[2]):"polymodeon"===event.type&&(event.type="monomode",event.value=!1,event.rawValue=event.message.data[2]),this.emit(event.type,event)}_parseEventForParameterNumber(event){const controller=event.message.dataBytes[0],value=event.message.dataBytes[1];99===controller||101===controller?(this._nrpnBuffer=[],this._rpnBuffer=[],99===controller?this._nrpnBuffer=[event.message]:127!==value&&(this._rpnBuffer=[event.message])):98===controller||100===controller?98===controller?(this._rpnBuffer=[],1===this._nrpnBuffer.length?this._nrpnBuffer.push(event.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],1===this._rpnBuffer.length&&127!==value?this._rpnBuffer.push(event.message):this._rpnBuffer=[]):6!==controller&&38!==controller&&96!==controller&&97!==controller||(2===this._rpnBuffer.length?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],event):2===this._nrpnBuffer.length?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],event):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(controller){return 6===controller||38===controller||96===controller||97===controller||98===controller||99===controller||100===controller||101===controller}_dispatchParameterNumberEvent(type,paramMsb,paramLsb,e){type="nrpn"===type?"nrpn":"rpn";const event={target:e.target,timestamp:e.timestamp,message:e.message,parameterMsb:paramMsb,parameterLsb:paramLsb,value:Utilities.from7bitToFloat(e.message.dataBytes[1]),rawValue:e.message.dataBytes[1]};event.parameter="rpn"===type?Object.keys(Enumerations.REGISTERED_PARAMETERS).find((key=>Enumerations.REGISTERED_PARAMETERS[key][0]===paramMsb&&Enumerations.REGISTERED_PARAMETERS[key][1]===paramLsb)):(paramMsb<<7)+paramLsb;const subtype=Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name;event.type=`${type}-${subtype}`,this.emit(event.type,event);const legacyEvent=Object.assign({},event);"nrpn-dataincrement"===legacyEvent.type?legacyEvent.type="nrpn-databuttonincrement":"nrpn-datadecrement"===legacyEvent.type?legacyEvent.type="nrpn-databuttondecrement":"rpn-dataincrement"===legacyEvent.type?legacyEvent.type="rpn-databuttonincrement":"rpn-datadecrement"===legacyEvent.type&&(legacyEvent.type="rpn-databuttondecrement"),this.emit(legacyEvent.type,legacyEvent),event.type=type,event.subtype=subtype,this.emit(event.type,event)}getChannelModeByNumber(number){return wm.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),number=Math.floor(number)),Utilities.getChannelModeByNumber(number)}getCcNameByNumber(number){if(wm.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),!((number=parseInt(number))>=0&&number<=127)))throw new RangeError("Invalid control change number.");return Utilities.getCcNameByNumber(number)}getNoteState(note){note instanceof Note&&(note=note.identifier);const number=Utilities.guessNoteNumber(note,wm.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[number]}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(value){this.validation&&(value=!!value),this.parameterNumberEventsEnabled=value}}
/**
   * The `Message` class represents a single MIDI message. It has several properties that make it
   * easy to make sense of the binary data it contains.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */class Message{constructor(data){this.rawData=data,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES,this.command)),this.statusByte===Enumerations.SYSTEM_MESSAGES.sysex&&(0===this.dataBytes[0]?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}
/**
   * The `Input` class represents a single MIDI input port. This object is automatically instantiated
   * by the library according to the host's MIDI subsystem and does not need to be directly
   * instantiated. Instead, you can access all `Input` objects by referring to the
   * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
   * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
   * [`WebMidi.getInputById()`](WebMidi#getInputById).
   *
   * Note that a single MIDI device may expose several inputs and/or outputs.
   *
   * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
   * (such as [`noteon`](InputChannel#event:noteon) or
   * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
   * object does that. However, you can still use the
   * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
   * [`InputChannel`](InputChannel) objects at once.
   *
   * @fires Input#opened
   * @fires Input#disconnected
   * @fires Input#closed
   * @fires Input#midimessage
   *
   * @fires Input#sysex
   * @fires Input#timecode
   * @fires Input#songposition
   * @fires Input#songselect
   * @fires Input#tunerequest
   * @fires Input#clock
   * @fires Input#start
   * @fires Input#continue
   * @fires Input#stop
   * @fires Input#activesensing
   * @fires Input#reset
   *
   * @fires Input#unknownmidimessage
   *
   * @extends EventEmitter
   * @license Apache-2.0
   */class Input extends EventEmitter$1{constructor(midiInput){super(),this._midiInput=midiInput,this._octaveOffset=0,this.channels=[];for(let i=1;i<=16;i++)this.channels[i]=new InputChannel(this,i);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach((ch=>ch.destroy())),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let event={timestamp:wm.time,target:this,port:this};"open"===e.port.connection?(event.type="opened",this.emit("opened",event)):"closed"===e.port.connection&&"connected"===e.port.state?(event.type="closed",this.emit("closed",event)):"closed"===e.port.connection&&"disconnected"===e.port.state?(event.type="disconnected",event.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",event)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const message=new Message(e.data),event={port:this,target:this,message:message,timestamp:e.timeStamp,type:"midimessage",data:message.data,rawData:message.data,statusByte:message.data[0],dataBytes:message.dataBytes};this.emit("midimessage",event),message.isSystemMessage?this._parseEvent(event):message.isChannelMessage&&this.channels[message.channel]._processMidiMessageEvent(event),this._forwarders.forEach((forwarder=>forwarder.forward(message)))}_parseEvent(e){const event=Object.assign({},e);event.type=event.message.type||"unknownmidimessage","songselect"===event.type&&(event.song=e.data[1]+1,event.value=e.data[1],event.rawValue=event.value),this.emit(event.type,event)}async open(){try{await this._midiInput.open()}catch(err){return Promise.reject(err)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(err){return Promise.reject(err)}return Promise.resolve(this)}getChannelModeByNumber(){wm.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(event,listener,options={}){if(wm.validation&&"function"==typeof options){let channels=null!=listener?[].concat(listener):void 0;listener=options,options={channels:channels}}if(Enumerations.CHANNEL_EVENTS.includes(event)){void 0===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS);let listeners=[];return Utilities.sanitizeChannels(options.channels).forEach((ch=>{listeners.push(this.channels[ch].addListener(event,listener,options))})),listeners}return super.addListener(event,listener,options)}addOneTimeListener(event,listener,options={}){return options.remaining=1,this.addListener(event,listener,options)}on(event,channel,listener,options){return this.addListener(event,channel,listener,options)}hasListener(event,listener,options={}){if(wm.validation&&"function"==typeof options){let channels=[].concat(listener);listener=options,options={channels:channels}}return Enumerations.CHANNEL_EVENTS.includes(event)?(void 0===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).every((ch=>this.channels[ch].hasListener(event,listener)))):super.hasListener(event,listener)}removeListener(event,listener,options={}){if(wm.validation&&"function"==typeof options){let channels=[].concat(listener);listener=options,options={channels:channels}}if(void 0===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),null==event)return Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch]&&this.channels[ch].removeListener()})),super.removeListener();Enumerations.CHANNEL_EVENTS.includes(event)?Utilities.sanitizeChannels(options.channels).forEach((ch=>{this.channels[ch].removeListener(event,listener,options)})):super.removeListener(event,listener,options)}addForwarder(output,options={}){let forwarder;return forwarder=output instanceof Forwarder?output:new Forwarder(output,options),this._forwarders.push(forwarder),forwarder}removeForwarder(forwarder){this._forwarders=this._forwarders.filter((item=>item!==forwarder))}hasForwarder(forwarder){return this._forwarders.includes(forwarder)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return wm.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}
/**
   * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
   * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
   *
   * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
   * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
   * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
   * module) version, you get an already-instantiated object when you import the module.
   *
   * @fires WebMidi#connected
   * @fires WebMidi#disabled
   * @fires WebMidi#disconnected
   * @fires WebMidi#enabled
   * @fires WebMidi#error
   * @fires WebMidi#midiaccessgranted
   * @fires WebMidi#portschanged
   *
   * @extends EventEmitter
   * @license Apache-2.0
   */const wm=new class extends EventEmitter$1{constructor(){super(),this.defaults={note:{attack:Utilities.from7bitToFloat(64),release:Utilities.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(options={},legacy=!1){if(Utilities.isNode){try{window.navigator}catch(err){global.navigator=await Object.getPrototypeOf((async function(){})).constructor('\n        let jzz = await import("jzz");\n        return jzz.default;\n        ')()}try{performance}catch(err){global.performance=await Object.getPrototypeOf((async function(){})).constructor('\n        let perf_hooks = await import("perf_hooks");\n        return perf_hooks.performance;\n        ')()}}if(this.validation=!1!==options.validation,this.validation&&("function"==typeof options&&(options={callback:options,sysex:legacy}),legacy&&(options.sysex=!0)),this.enabled)return"function"==typeof options.callback&&options.callback(),Promise.resolve();const errorEvent={timestamp:this.time,target:this,type:"error",error:void 0},midiAccessGrantedEvent={timestamp:this.time,target:this,type:"midiaccessgranted"},enabledEvent={timestamp:this.time,target:this,type:"enabled"};try{"function"==typeof options.requestMIDIAccessFunction?this.interface=await options.requestMIDIAccessFunction({sysex:options.sysex,software:options.software}):this.interface=await navigator.requestMIDIAccess({sysex:options.sysex,software:options.software})}catch(err){return errorEvent.error=err,this.emit("error",errorEvent),"function"==typeof options.callback&&options.callback(err),Promise.reject(err)}this.emit("midiaccessgranted",midiAccessGrantedEvent),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(err){return errorEvent.error=err,this.emit("error",errorEvent),"function"==typeof options.callback&&options.callback(err),Promise.reject(err)}return this.emit("enabled",enabledEvent),"function"==typeof options.callback&&options.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then((()=>{navigator&&"function"==typeof navigator.close&&navigator.close(),this.interface=null;let event={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",event),this.removeListener()}))}getInputById(id,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!id)return}if(options.disconnected){for(let i=0;i<this._disconnectedInputs.length;i++)if(this._disconnectedInputs[i].id===id.toString())return this._disconnectedInputs[i]}else for(let i=0;i<this.inputs.length;i++)if(this.inputs[i].id===id.toString())return this.inputs[i]}getInputByName(name,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!name)return;name=name.toString()}if(options.disconnected){for(let i=0;i<this._disconnectedInputs.length;i++)if(~this._disconnectedInputs[i].name.indexOf(name))return this._disconnectedInputs[i]}else for(let i=0;i<this.inputs.length;i++)if(~this.inputs[i].name.indexOf(name))return this.inputs[i]}getOutputByName(name,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!name)return;name=name.toString()}if(options.disconnected){for(let i=0;i<this._disconnectedOutputs.length;i++)if(~this._disconnectedOutputs[i].name.indexOf(name))return this._disconnectedOutputs[i]}else for(let i=0;i<this.outputs.length;i++)if(~this.outputs[i].name.indexOf(name))return this.outputs[i]}getOutputById(id,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!id)return}if(options.disconnected){for(let i=0;i<this._disconnectedOutputs.length;i++)if(this._disconnectedOutputs[i].id===id.toString())return this._disconnectedOutputs[i]}else for(let i=0;i<this.outputs.length;i++)if(this.outputs[i].id===id.toString())return this.outputs[i]}noteNameToNumber(name){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),Utilities.toNoteNumber(name,this.octaveOffset)}getOctave(number){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),number=parseInt(number)),!isNaN(number)&&number>=0&&number<=127&&Utilities.getNoteDetails(Utilities.offsetNumber(number,this.octaveOffset)).octave}sanitizeChannels(channel){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),Utilities.sanitizeChannels(channel)}toMIDIChannels(channel){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),Utilities.sanitizeChannels(channel)}guessNoteNumber(input){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),Utilities.guessNoteNumber(input,this.octaveOffset)}getValidNoteArray(notes,options={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),Utilities.buildNoteArray(notes,options)}convertToTimestamp(time){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),Utilities.toTimestamp(time)}async _destroyInputsAndOutputs(){let promises=[];return this.inputs.forEach((input=>promises.push(input.destroy()))),this.outputs.forEach((output=>promises.push(output.destroy()))),Promise.all(promises).then((()=>{this._inputs=[],this._outputs=[]}))}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let event={timestamp:e.timeStamp,type:e.port.state,target:this};if("connected"===e.port.state&&"open"===e.port.connection){"output"===e.port.type?event.port=this.getOutputById(e.port.id):"input"===e.port.type&&(event.port=this.getInputById(e.port.id)),this.emit(e.port.state,event);const portsChangedEvent=Object.assign({},event);portsChangedEvent.type="portschanged",this.emit(portsChangedEvent.type,portsChangedEvent)}else if("disconnected"===e.port.state&&"pending"===e.port.connection){"input"===e.port.type?event.port=this.getInputById(e.port.id,{disconnected:!0}):"output"===e.port.type&&(event.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,event);const portsChangedEvent=Object.assign({},event);portsChangedEvent.type="portschanged",this.emit(portsChangedEvent.type,portsChangedEvent)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let i=this._inputs.length-1;i>=0;i--){const current=this._inputs[i];Array.from(this.interface.inputs.values()).find((input=>input===current._midiInput))||(this._disconnectedInputs.push(current),this._inputs.splice(i,1))}let promises=[];return this.interface.inputs.forEach((nInput=>{if(!this._inputs.find((input=>input._midiInput===nInput))){let input=this._disconnectedInputs.find((input=>input._midiInput===nInput));input||(input=new Input(nInput)),this._inputs.push(input),promises.push(input.open())}})),Promise.all(promises)}async _updateOutputs(){if(!this.interface)return;for(let i=this._outputs.length-1;i>=0;i--){const current=this._outputs[i];Array.from(this.interface.outputs.values()).find((output=>output===current._midiOutput))||(this._disconnectedOutputs.push(current),this._outputs.splice(i,1))}let promises=[];return this.interface.outputs.forEach((nOutput=>{if(!this._outputs.find((output=>output._midiOutput===nOutput))){let output=this._disconnectedOutputs.find((output=>output._midiOutput===nOutput));output||(output=new Output(nOutput)),this._outputs.push(output),promises.push(output.open())}})),Promise.all(promises)}get enabled(){return null!==this.interface}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),Utilities.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),Utilities.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get outputs(){return this._outputs}get supported(){return"undefined"!=typeof navigator&&navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.6"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),Enumerations.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),Enumerations.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),Enumerations.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),Enumerations.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),Enumerations.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _toConsumableArray(arr){return function(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}wm.constructor=null;var MidiplexNodeInstance=function(){function MidiplexNodeInstance(key,node){var _a,_b,_c,_d,config=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var _key in _classCallCheck(this,MidiplexNodeInstance),this.props=new Map,this.state=new Map,this.inputs=new Map,this.outputs=new Map,this.receiveHandler=null,this.updateHandler=null,this.key=key,this.definition=node,node.props){var k=_key;this.props.set(k,null!==(_b=null===(_a=config.props)||void 0===_a?void 0:_a[k])&&void 0!==_b?_b:node.props[k].value)}for(var _key2 in node.state){var _k=_key2;this.state.set(_k,node.state[_k].value)}for(var _key3 in node.inputs)this.inputs.set(_key3,{key:_key3,messageTypes:node.inputs[_key3].messageTypes,node:this,to:[]});for(var _key4 in node.outputs)this.outputs.set(_key4,{key:_key4,messageTypes:node.outputs[_key4].messageTypes,node:this,to:[]});this.getProp=this.getProp.bind(this),this.setProp=this.setProp.bind(this),this.getState=this.getState.bind(this),this.getOrSetStateInternal=this.getOrSetStateInternal.bind(this),null===(_d=(_c=this.definition).node)||void 0===_d||_d.call(_c,{prop:this.getProp.bind(this),state:this.getOrSetStateInternal.bind(this),send:this.send.bind(this),receive:this.bindReceive.bind(this),update:this.bindUpdate.bind(this)})}return _createClass(MidiplexNodeInstance,[{key:"bindReceive",value:function(handler){if(this.receiveHandler)throw new Error("Receive handler already bound to node ".concat(this.key,"."));this.receiveHandler=handler}},{key:"bindUpdate",value:function(handler){if(this.updateHandler)throw new Error("Update handler already bound to node ".concat(this.key,"."));this.updateHandler=handler}},{key:"getOrSetStateInternal",value:function(stateKey,value){return void 0!==value&&this.state.set(stateKey,value),this.state.get(stateKey)}},{key:"getState",value:function(stateKey){return this.state.get(stateKey)}},{key:"getProp",value:function(propKey){return this.props.get(propKey)}},{key:"setProp",value:function(propKey,value){var _a;return this.props.set(propKey,value),null===(_a=this.updateHandler)||void 0===_a||_a.call(this),value}},{key:"getDefaultEdge",value:function(){return this.inputs.values().next().value}},{key:"getInputEdge",value:function(edgeKey){var edge=this.inputs.get(edgeKey);if(edge)return edge;throw new Error("Input edge ".concat(edgeKey," does not exist."))}},{key:"connect",value:function(edgeKey,to){var edge=this.outputs.get(edgeKey);if(!edge)throw Error("Output edge ".concat(edge," does not exist."));if(edge.to.includes(to))throw Error("Output edge ".concat(edge," is already connected to ").concat(to,"."));edge.to.push(to)}},{key:"disconnect",value:function(edgeKey,to){var edge=this.outputs.get(edgeKey);return!!edge&&(edge.to=edge.to.filter((function(edge){return edge!==to})),!0)}},{key:"send",value:function(message,edgeKey){var edge=edgeKey?this.outputs.get(edgeKey):this.getDefaultEdge();if(edge){if(edge.messageTypes.includes(message.type))return void edge.to.forEach((function(receivingEdge){receivingEdge.node.receive(message,receivingEdge.key)}));throw Error('Message type "'.concat(message.type,'" is not supported by edge "').concat(edgeKey,'" for node type ').concat(this.definition.key,"."))}throw Error('Output edge "'.concat(edge,'" does not exist.'))}},{key:"receive",value:function(message,edge){var _a,edgeInstance=this.inputs.get(edge);if(edgeInstance){if(edgeInstance.messageTypes.includes(message.type))return void(null===(_a=this.receiveHandler)||void 0===_a||_a.call(this,message,edge));var thruEdge=this.outputs.get("thru");if(thruEdge)return void thruEdge.to.forEach((function(receivingEdge){receivingEdge.node.receive(message,receivingEdge.key)}))}}}]),MidiplexNodeInstance}(),EventEmitter=function(){function EventEmitter(){_classCallCheck(this,EventEmitter),this.events={}}return _createClass(EventEmitter,[{key:"on",value:function(event,listener){this.events[event]||(this.events[event]=[]),this.events[event].push(listener)}},{key:"emit",value:function(event){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];this.events[event]&&this.events[event].forEach((function(listener){return listener.apply(void 0,args)}))}},{key:"removeListener",value:function(event,listener){this.events[event]&&(this.events[event]=this.events[event].filter((function(l){return l!==listener})))}}]),EventEmitter}(),KeyboardPoly=function(){function KeyboardPoly(){_classCallCheck(this,KeyboardPoly),this.notes=new Map,this.events=new EventEmitter}return _createClass(KeyboardPoly,[{key:"on",value:function(event,listener){this.events.on(event,listener)}},{key:"message",value:function(m){"noteon"===m.type?this.notes.has(m.data[2])||(this.notes.set(m.data[2],m),this.events.emit("noteon",m)):"noteoff"===m.type&&this.notes.has(m.data[2])&&(this.notes.delete(m.data[2]),this.events.emit("noteoff",m))}},{key:"getActiveNotes",value:function(){return this.notes.values()}},{key:"clear",value:function(){this.notes.clear()}}]),KeyboardPoly}(),KeyboardPolyLatch=function(){function KeyboardPolyLatch(){var maxLatch=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1/0;_classCallCheck(this,KeyboardPolyLatch),this.notes=new Map,this.events=new EventEmitter,this._maxLatch=1/0,this._maxLatch=maxLatch}return _createClass(KeyboardPolyLatch,[{key:"on",value:function(event,listener){this.events.on(event,listener)}},{key:"message",value:function(m){if("noteon"===m.type)if(this.notes.has(m.data[2]))this.notes.delete(m.data[2]),this.events.emit("noteoff",m);else if(this.notes.set(m.data[2],m),this.events.emit("noteon",m),this.notes.size>this._maxLatch){var note=this.notes.values().next().value;this.notes.delete(note.data[2]),this.events.emit("noteoff",note)}}},{key:"getActiveNotes",value:function(){return this.notes.values()}},{key:"setMaxLatch",value:function(maxLatch){if(this._maxLatch=maxLatch,this.notes.size>this._maxLatch)for(var notes=this.notes.values(),i=0;i<this.notes.size-this._maxLatch;i++){var note=notes.next().value;this.notes.delete(note.data[2]),this.events.emit("noteoff",note)}}},{key:"clear",value:function(){this.notes.clear()}}]),KeyboardPolyLatch}(),KeyboardMono=function(){function KeyboardMono(){_classCallCheck(this,KeyboardMono),this.note=null,this.events=new EventEmitter}return _createClass(KeyboardMono,[{key:"on",value:function(event,listener){this.events.on(event,listener)}},{key:"message",value:function(m){"noteon"===m.type?(this.note&&this.events.emit("noteoff",this.note),this.note=m,this.events.emit("noteon",m)):"noteoff"===m.type&&this.note&&(this.events.emit("noteoff",this.note),this.note=null)}},{key:"getActiveNotes",value:function(){return this.note?[this.note]:[]}},{key:"clear",value:function(){this.note=null}}]),KeyboardMono}(),KeyboardMonoLatch=function(){function KeyboardMonoLatch(){_classCallCheck(this,KeyboardMonoLatch),this.note=null,this.events=new EventEmitter}return _createClass(KeyboardMonoLatch,[{key:"on",value:function(event,listener){this.events.on(event,listener)}},{key:"message",value:function(m){if("noteon"===m.type){if(this.note&&(this.events.emit("noteoff",this.note),this.note.data[2]===m.data[2]))return void(this.note=null);this.note=m,this.events.emit("noteon",m)}}},{key:"getActiveNotes",value:function(){return this.note?[this.note]:[]}},{key:"clear",value:function(){this.note=null}}]),KeyboardMonoLatch}(),AllMessageTypes=["noteoff","noteon","controlchange","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement"],ChannelMessageTypes=["noteoff","noteon","controlchange","keyaftertouch","programchange","channelaftertouch","pitchbend"],convertRange=function(oldVal,oldMin,oldMax,newMin,newMax){return(oldVal-oldMin)*(newMax-newMin)/(oldMax-oldMin)+newMin},clamp=function(num,min,max){return Math.min(Math.max(num,min),max)},notes=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],noteToMidi=function(note){var octave=parseInt(note.slice(-1)),key=note.slice(0,-1),semitone=notes.indexOf(key);if(-1===semitone||octave<-1||octave>9)throw new Error("Invalid note format");return 12*octave+semitone+12},isChannelMessage=function(data){return(240&data[0])>=128&&(240&data[0])<=239},setChannel=function(data,channel){if(isChannelMessage(data)){channel=clamp(channel,1,16);var statusByte=240&data[0];data[0]=statusByte+channel-1}return data},Util=Object.freeze({Math:{convertRange:convertRange,clamp:clamp},Data:{isChannelMessage:isChannelMessage,setChannel:setChannel},Message:{create:function(data,channel){return channel&&setChannel(data,channel),new MidiplexMessage(data)},matchTrigger:function(trigger,m){if("test"in trigger)return trigger.test(m);switch(!0){case"noteon"===trigger.type&&"noteon"===m.type:case"noteoff"===trigger.type&&"noteoff"===m.type:return!("note"in trigger)||trigger.note===m.data[1];case"controlchange"===trigger.type&&"controlchange"===m.type:return"cc"in trigger&&"value"in trigger?trigger.cc===m.data[1]&&trigger.value===m.data[2]:"cc"in trigger?trigger.cc===m.data[1]:!("value"in trigger)||trigger.value===m.data[2];default:return!1}}},Clock:{isClockMessage:function(m){return"clock"===m.type||"timecode"===m.type||"start"===m.type||"stop"===m.type},getTimeClockResolution:function(beat){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:24)*(4/beat)},beat:function(_beat,callback){var resolution=Util.Clock.getTimeClockResolution(_beat),tickCount=0;return{tick:function(message){if("clock"===message.type)tickCount++;else{if("start"!==message.type&&"stop"!==message.type)return;tickCount=0}tickCount%resolution==0&&callback()},reset:function(){tickCount=0}}}},Note:{noteToMidi:noteToMidi,equals:function(note1,note2){return note1.type===note2.type&&note1.data[1]===note2.data[1]},on:function(offNote,velocity){return new MidiplexMessage(new Uint8Array([144,offNote.data[1],offNote.data[2]]))},off:function(onNote){return new MidiplexMessage(new Uint8Array([128,onNote.data[1],onNote.data[2]]))},getPolyKeyboard:function(){return new KeyboardPoly},getPolyLatchKeyboard:function(maxLatch){return new KeyboardPolyLatch(maxLatch)},getMonoKeyboard:function(){return new KeyboardMono},getMonoLatchKeyboard:function(){return new KeyboardMonoLatch}},Controlchange:{inRange:function(cc,range){return cc.data[2]>=range.min&&cc.data[2]<=range.max}},Generate:{noteon:function(note,velocity,channel){return"string"==typeof note&&(note=noteToMidi(note)),Util.Message.create(new Uint8Array([144,note,velocity]),channel)},noteoff:function(note,velocity,channel){return"string"==typeof note&&(note=noteToMidi(note)),Util.Message.create(new Uint8Array([128,note,velocity]),channel)},controlchange:function(cc,value,channel){return Util.Message.create(new Uint8Array([176,cc,value]),channel)},keyaftertouch:function(note,pressure,channel){return"string"==typeof note&&(note=noteToMidi(note)),Util.Message.create(new Uint8Array([160,note,pressure]),channel)},programchange:function(program,channel){return Util.Message.create(new Uint8Array([192,program]),channel)},pitchbend:function(value,channel){return Util.Message.create(new Uint8Array([224,value]),channel)},channelaftertouch:function(pressure,channel){return Util.Message.create(new Uint8Array([208,pressure]),channel)}}}),MidiplexMessage=function(){function MidiplexMessage(message,opts){var _a;_classCallCheck(this,MidiplexMessage),this.message=message instanceof Message?message:new Message(message),this.trace=null!==(_a=null==opts?void 0:opts.trace)&&void 0!==_a?_a:[],this._beat=null==opts?void 0:opts.beat}return _createClass(MidiplexMessage,[{key:"addTrace",value:function(nodeKey){this.trace.push(nodeKey)}},{key:"hasTrace",value:function(nodeKey){return this.trace.includes(nodeKey)}},{key:"setChannel",value:function(channel){if(channel=clamp(channel,1,16),this.message.isChannelMessage){var MESSAGE_TYPE=240&this.message.data[0];this.message=new Message(new Uint8Array([MESSAGE_TYPE+channel-1,this.message.data[1],this.message.data[2]]))}}},{key:"clone",value:function(channel){var m=new MidiplexMessage(new Uint8Array(_toConsumableArray(this.message.data)),{trace:this.trace});return channel&&m.setChannel(channel),m}},{key:"isChannelMessage",get:function(){return this.message.isChannelMessage}},{key:"channel",get:function(){return this.message.channel}},{key:"type",get:function(){return this.message.type}},{key:"data",get:function(){return this.message.data}},{key:"beat",get:function(){return this._beat}}]),MidiplexMessage}(),MidiClock=function(){function MidiClock(timeSignature){var ticksPerBeat=arguments.length>1&&void 0!==arguments[1]?arguments[1]:24;_classCallCheck(this,MidiClock),this.timeSignature=timeSignature,this.ticksPerBeat=ticksPerBeat,this.tickCount=0}return _createClass(MidiClock,[{key:"tick",value:function(){var type=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"clock";return"start"===type||"stop"===type?this.tickCount=0:"clock"===type&&this.tickCount++,this.getBeatDivision()}},{key:"reset",value:function(){this.tickCount=0}},{key:"setTimeSignature",value:function(timeSignature){this.timeSignature=timeSignature}},{key:"getBeatDivision",value:function(){var beatsPerMeasure=this.timeSignature[0],ticksPerMeasure=this.ticksPerBeat*beatsPerMeasure;return this.tickCount%(ticksPerMeasure/1)==0?1:this.tickCount%(ticksPerMeasure/2)==0?2:this.tickCount%(ticksPerMeasure/4)==0?4:this.tickCount%(ticksPerMeasure/8)==0?8:this.tickCount%(ticksPerMeasure/16)==0?16:this.tickCount%(ticksPerMeasure/32)==0?32:0}}]),MidiClock}(),InputNodeDefinition={name:"Input",key:"INPUT_NODE",description:"A node that receives MIDI messages from a MIDI device. Messages are immediately sent to the node's output.",inputs:{},outputs:{out:{name:"Out",messageTypes:AllMessageTypes},clock:{name:"Clock",messageTypes:["clock","timecode","start","stop"]}},props:{inputId:{name:"Input",value:null},timeSignature:{name:"Time Signature",value:[4,4]}},node:function(_ref){var prop=_ref.prop,send=_ref.send,update=_ref.update;_ref.receive;var inputId=prop("inputId"),clock=new MidiClock(prop("timeSignature")),handleInputMessage=function(event){var t=event.message.type;if("clock"!==t&&"timecode"!==t&&"start"!==t&&"stop"!==t)send(new MidiplexMessage(event.message),"out");else{var beat=clock.tick(event.message.type);send(new MidiplexMessage(event.message,{beat:beat}),"clock")}},bind=function(){if(inputId){var input=wm.getInputById(inputId);if(input)return void input.addListener("midimessage",handleInputMessage);console.warn("Input ".concat(inputId," not found"))}};update((function(){!function(){if(inputId){var input=wm.getInputById(inputId);input&&input.removeListener("midimessage",handleInputMessage)}}(),inputId=prop("inputId"),bind()})),bind()}},InputNode=function(_MidiplexNodeInstance){_inherits(InputNode,_MidiplexNodeInstance);var _super=_createSuper(InputNode);function InputNode(key){return _classCallCheck(this,InputNode),_super.call(this,key,InputNodeDefinition)}return _createClass(InputNode)}(MidiplexNodeInstance),OutputNodeDefinition={name:"Input",key:"INPUT_NODE",description:"A node that receives MIDI messages from a MIDI device. Messages are immediately sent to the node's output.",inputs:{in:{name:"Out",messageTypes:AllMessageTypes}},outputs:{},props:{outputId:{name:"Output",value:null}},node:function(_ref){var prop=_ref.prop;_ref.send;var output,update=_ref.update,receive=_ref.receive,outputId=prop("outputId");outputId&&((output=wm.getOutputById(outputId))||console.warn("Output ".concat(outputId," not found"))),receive((function(message,edge){output&&output.send(message.data)})),update((function(){(outputId=prop("outputId"))&&((output=wm.getOutputById(outputId))||console.warn("Output ".concat(outputId," not found")))}))}},OutputNode=function(_MidiplexNodeInstance){_inherits(OutputNode,_MidiplexNodeInstance);var _super=_createSuper(OutputNode);function OutputNode(key){return _classCallCheck(this,OutputNode),_super.call(this,key,OutputNodeDefinition)}return _createClass(OutputNode)}(MidiplexNodeInstance),DebugNodeDef={name:"Debug",key:"DEBUG_NODE",description:"",inputs:{in:{name:"In",messageTypes:AllMessageTypes},clock:{name:"Clock",messageTypes:["clock","start","stop"]}},outputs:{out:{name:"Out",messageTypes:AllMessageTypes}},props:{logToConsole:{name:"Log to console",value:!1},callback:{name:"Callback",value:function(){}}},node:function(_ref){var send=_ref.send,receive=_ref.receive,prop=_ref.prop;receive((function(message,edge){"clock"===edge&&64===message.beat||(prop("logToConsole")&&console.log(message),prop("callback")(message),Util.Clock.isClockMessage(message)||send(message,"out"))}))}},DebugNode=function(_MidiplexNodeInstance){_inherits(DebugNode,_MidiplexNodeInstance);var _super=_createSuper(DebugNode);function DebugNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,DebugNode),_super.call(this,key,DebugNodeDef,config)}return _createClass(DebugNode)}(MidiplexNodeInstance),MessageTypePassNodeDef={name:"Message Type Filter",key:"MESSAGE_TYPE_PASS_NODE",description:"",inputs:{in:{name:"In",messageTypes:AllMessageTypes}},outputs:{out:{name:"Out",messageTypes:AllMessageTypes}},props:{messageTypes:{name:"Message Types",value:AllMessageTypes}},node:function(_ref){var send=_ref.send,receive=_ref.receive,prop=_ref.prop;receive((function(message){prop("messageTypes").includes(message.type)&&send(message,"out")}))}},MessageTypePassNode=function(_MidiplexNodeInstance){_inherits(MessageTypePassNode,_MidiplexNodeInstance);var _super=_createSuper(MessageTypePassNode);function MessageTypePassNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,MessageTypePassNode),_super.call(this,key,MessageTypePassNodeDef,config)}return _createClass(MessageTypePassNode)}(MidiplexNodeInstance),outputs=Object.fromEntries(AllMessageTypes.map((function(type){return[type,{name:type,messageTypes:[type]}]}))),MessageTypeSplitDef={name:"Message Type Splitter",key:"MESSAGE_TYPE_SPLIT_NODE",description:"",inputs:{in:{name:"In",messageTypes:AllMessageTypes}},outputs:Object.assign({},outputs),node:function(_ref){var send=_ref.send,receive=_ref.receive;_ref.prop,receive((function(message){send(message,message.type)}))}},MessageTypeSplitNode=function(_MidiplexNodeInstance){_inherits(MessageTypeSplitNode,_MidiplexNodeInstance);var _super=_createSuper(MessageTypeSplitNode);function MessageTypeSplitNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,MessageTypeSplitNode),_super.call(this,key,MessageTypeSplitDef,config)}return _createClass(MessageTypeSplitNode)}(MidiplexNodeInstance),TransposeNodeDef={name:"Transpose",key:"TRANSPOSE_NODE",description:"",inputs:{in:{name:"In",messageTypes:["noteon","noteoff"]}},outputs:{out:{name:"Out",messageTypes:["noteon","noteoff"]}},props:{transpose:{name:"Transpose",value:0}},node:function(_ref){var send=_ref.send,receive=_ref.receive,prop=_ref.prop;receive((function(message,edge){var transpose=prop("transpose"),transposed=clamp(message.data[1]+transpose,0,127),data=new Uint8Array([message.data[0],transposed,message.data[2]]);send(new MidiplexMessage(data),"out")}))}},TransposeNode=function(_MidiplexNodeInstance){_inherits(TransposeNode,_MidiplexNodeInstance);var _super=_createSuper(TransposeNode);function TransposeNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,TransposeNode),_super.call(this,key,TransposeNodeDef,config)}return _createClass(TransposeNode)}(MidiplexNodeInstance),CCRangeNodeDef={name:"CC Range",key:"CC_RANGE_NODE",description:"Filter the range of values sent for a given CC.",inputs:{in:{name:"In",messageTypes:["controlchange"]}},outputs:{out:{name:"Out",messageTypes:["controlchange"]}},props:{mapping:{name:"Range Mapping",value:{}}},node:function(_ref){var prop=_ref.prop,send=_ref.send;(0,_ref.receive)((function(message){var range=prop("mapping")[message.data[1]];range?Util.Controlchange.inRange(message,range)&&send(message,"out"):send(message,"out")}))}},CCRangeNode=function(_MidiplexNodeInstance){_inherits(CCRangeNode,_MidiplexNodeInstance);var _super=_createSuper(CCRangeNode);function CCRangeNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,CCRangeNode),_super.call(this,key,CCRangeNodeDef,config)}return _createClass(CCRangeNode)}(MidiplexNodeInstance),CCScaleNodeDef={name:"CC Range",key:"CC_SCALE_NODE",description:"Rescale CC messages to a smaller range. Useful for mapping a knob to a smaller range while preserving the control's full range of motion.",inputs:{in:{name:"In",messageTypes:["controlchange"]}},outputs:{out:{name:"Out",messageTypes:["controlchange"]}},props:{mapping:{name:"Range Mapping",value:{}}},node:function(_ref){var prop=_ref.prop,send=_ref.send;(0,_ref.receive)((function(message){var map=prop("mapping"),cc=message.data[1];if(void 0===map[cc]||null===map[cc])send(message,"out");else{var data=new Uint8Array([message.data[0],message.data[1],convertRange(message.data[2],0,127,map[cc].min,map[cc].max)]);send(new MidiplexMessage(data),"out")}}))}},CCScaleNode=function(_MidiplexNodeInstance){_inherits(CCScaleNode,_MidiplexNodeInstance);var _super=_createSuper(CCScaleNode);function CCScaleNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,CCScaleNode),_super.call(this,key,CCScaleNodeDef,config)}return _createClass(CCScaleNode)}(MidiplexNodeInstance),CCMapNodeDef={name:"CC Map",key:"CC_MAP_NODE",description:"Map control change messages to other control change destinations.",inputs:{in:{name:"In",messageTypes:["controlchange"]}},outputs:{out:{name:"Out",messageTypes:["controlchange"]}},props:{mapping:{name:"Mapping",value:{}}},node:function(_ref){var prop=_ref.prop,send=_ref.send;(0,_ref.receive)((function(message){var map=prop("mapping"),cc=message.data[1];if(map[cc]){var mData=message.data;map[cc].forEach((function(cc){send(new MidiplexMessage(new Uint8Array([mData[0],cc,mData[2]])),"out")}))}else send(message,"out")}))}},CCMapNode=function(_MidiplexNodeInstance){_inherits(CCMapNode,_MidiplexNodeInstance);var _super=_createSuper(CCMapNode);function CCMapNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,CCMapNode),_super.call(this,key,CCMapNodeDef,config)}return _createClass(CCMapNode)}(MidiplexNodeInstance),TogglePathDef={name:"CC Toggle Path",key:"TOGGLE_PATH_NODE",description:"Toggles the output path open or closed via the given CC channel and value. The given CC value is always filtered out.",inputs:{in:{name:"In",messageTypes:AllMessageTypes}},outputs:{out:{name:"Out",messageTypes:AllMessageTypes}},props:{triggerOpen:{name:"Open Value",value:null},triggerClosed:{name:"Closed Value",value:null},open:{name:"Open",value:!0}},node:function(_ref){var send=_ref.send,receive=_ref.receive,update=_ref.update,prop=_ref.prop,isOpen=prop("open");update((function(){isOpen=prop("open")})),receive((function(message){if(isOpen){var triggerClosed=prop("triggerClosed");if(triggerClosed&&Util.Message.matchTrigger(triggerClosed,message))return void(isOpen=!1)}else{var triggerOpen=prop("triggerOpen");if(triggerOpen&&Util.Message.matchTrigger(triggerOpen,message))return void(isOpen=!0)}isOpen&&send(message,"out")}))}},TogglePathNode=function(_MidiplexNodeInstance){_inherits(TogglePathNode,_MidiplexNodeInstance);var _super=_createSuper(TogglePathNode);function TogglePathNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,TogglePathNode),_super.call(this,key,TogglePathDef,config)}return _createClass(TogglePathNode)}(MidiplexNodeInstance),CustomFilterNodeDef={name:"Custom Filter",key:"CUSTOM_FILTER_NODE",description:"",inputs:{in:{name:"In",messageTypes:AllMessageTypes}},outputs:{out:{name:"Out",messageTypes:AllMessageTypes}},props:{filter:{name:"Filter Function",value:function(){return!0}}},node:function(_ref){var send=_ref.send,receive=_ref.receive,prop=_ref.prop;receive((function(message){prop("filter")(message)&&send(message,"out")}))}},CustomFilterNode=function(_MidiplexNodeInstance){_inherits(CustomFilterNode,_MidiplexNodeInstance);var _super=_createSuper(CustomFilterNode);function CustomFilterNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,CustomFilterNode),_super.call(this,key,CustomFilterNodeDef,config)}return _createClass(CustomFilterNode)}(MidiplexNodeInstance),CCPassNodeDef={name:"CC Pass",key:"CC_PASS_NODE",description:"Specify which CC messages are allowed to pass through.",inputs:{in:{name:"In",messageTypes:["controlchange"]}},outputs:{out:{name:"Out",messageTypes:["controlchange"]}},props:{pass:{name:"Pass",value:[]}},node:function(_ref){var prop=_ref.prop,send=_ref.send;(0,_ref.receive)((function(message){prop("pass").includes(message.data[1])&&send(message,"out")}))}},CCPassNode=function(_MidiplexNodeInstance){_inherits(CCPassNode,_MidiplexNodeInstance);var _super=_createSuper(CCPassNode);function CCPassNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,CCPassNode),_super.call(this,key,CCPassNodeDef,config)}return _createClass(CCPassNode)}(MidiplexNodeInstance),NoteMapNodeDef={name:"Note Map",key:"NOTE_MAP_NODE",description:"Map noteon/noteoff messages to other notes.",inputs:{in:{name:"In",messageTypes:["controlchange"]}},outputs:{out:{name:"Out",messageTypes:["controlchange"]}},props:{mapping:{name:"Mapping",value:{}}},node:function(_ref){var prop=_ref.prop,send=_ref.send;(0,_ref.receive)((function(message){var map=prop("mapping"),cc=message.data[1];if(map[cc]){var mData=message.data;map[cc].forEach((function(cc){send(new MidiplexMessage(new Uint8Array([mData[0],cc,mData[2]])),"out")}))}else send(message,"out")}))}},NoteMapNode=function(_MidiplexNodeInstance){_inherits(NoteMapNode,_MidiplexNodeInstance);var _super=_createSuper(NoteMapNode);function NoteMapNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,NoteMapNode),_super.call(this,key,NoteMapNodeDef,config)}return _createClass(NoteMapNode)}(MidiplexNodeInstance),SetChannelNodeDef={name:"Set Channel",key:"SET_CHANNEL_NODE",description:"Set a specific channel for all messages passing through this node. Non-channel messages are passed through unmodified.",inputs:{in:{name:"In",messageTypes:AllMessageTypes}},outputs:{out:{name:"Out",messageTypes:AllMessageTypes}},props:{channel:{name:"Channel",value:AllMessageTypes}},node:function(_ref){var send=_ref.send,receive=_ref.receive,prop=_ref.prop;receive((function(message){message.setChannel(prop("channel")),send(message,"out")}))}},SetChannelNode=function(_MidiplexNodeInstance){_inherits(SetChannelNode,_MidiplexNodeInstance);var _super=_createSuper(SetChannelNode);function SetChannelNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,SetChannelNode),_super.call(this,key,SetChannelNodeDef,config)}return _createClass(SetChannelNode)}(MidiplexNodeInstance),SplitChannelNodeDef={name:"Split Channel",key:"SPLIT_CHANNEL_NODE",description:'Split messages by channel. Each channel has its own output edge by number. Non-channel messages are passed through the edge "nonchannel"',inputs:{in:{name:"In",messageTypes:AllMessageTypes}},outputs:{nonchannel:{name:"Non-Channel",messageTypes:AllMessageTypes},1:{name:"Channel 1",messageTypes:ChannelMessageTypes},2:{name:"Channel 2",messageTypes:ChannelMessageTypes},3:{name:"Channel 3",messageTypes:ChannelMessageTypes},4:{name:"Channel 4",messageTypes:ChannelMessageTypes},5:{name:"Channel 5",messageTypes:ChannelMessageTypes},6:{name:"Channel 6",messageTypes:ChannelMessageTypes},7:{name:"Channel 7",messageTypes:ChannelMessageTypes},8:{name:"Channel 8",messageTypes:ChannelMessageTypes},9:{name:"Channel 9",messageTypes:ChannelMessageTypes},10:{name:"Channel 10",messageTypes:ChannelMessageTypes},11:{name:"Channel 11",messageTypes:ChannelMessageTypes},12:{name:"Channel 12",messageTypes:ChannelMessageTypes},13:{name:"Channel 13",messageTypes:ChannelMessageTypes},14:{name:"Channel 14",messageTypes:ChannelMessageTypes},15:{name:"Channel 15",messageTypes:ChannelMessageTypes},16:{name:"Channel 16",messageTypes:ChannelMessageTypes}},props:{},node:function(_ref){var send=_ref.send,receive=_ref.receive;_ref.prop,receive((function(message){message.isChannelMessage?send(message,message.channel.toString()):send(message,"nonchannel")}))}},SplitChannelNode=function(_MidiplexNodeInstance){_inherits(SplitChannelNode,_MidiplexNodeInstance);var _super=_createSuper(SplitChannelNode);function SplitChannelNode(key){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _classCallCheck(this,SplitChannelNode),_super.call(this,key,SplitChannelNodeDef,config)}return _createClass(SplitChannelNode)}(MidiplexNodeInstance),nodes=Object.freeze({__proto__:null,CCMapNode:CCMapNode,CCPassNode:CCPassNode,CCRangeNode:CCRangeNode,CCScaleNode:CCScaleNode,CustomFilterNode:CustomFilterNode,DebugNode:DebugNode,InputNode:InputNode,MessageTypePassNode:MessageTypePassNode,MessageTypeSplitNode:MessageTypeSplitNode,NoteMapNode:NoteMapNode,OutputNode:OutputNode,SetChannelNode:SetChannelNode,SplitChannelNode:SplitChannelNode,TogglePathNode:TogglePathNode,TransposeNode:TransposeNode});exports.Nodes=nodes,exports.Util=Util,exports.WebMidi=wm}));
//# sourceMappingURL=midiplex.min.js.map
